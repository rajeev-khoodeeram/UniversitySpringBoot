package ca.cloudace.backend.controller;

import java.util.List;
import java.util.Optional;

import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import ca.cloudace.backend.model.Course;
import ca.cloudace.backend.model.Department;
import ca.cloudace.backend.service.CourseService;
import ca.cloudace.backend.service.DepartmentService;

@RestController
@RequestMapping("/api/courses")
public class CourseController {

    private final CourseService courseService;
    private final DepartmentService departmentService;

    public CourseController(CourseService courseService, DepartmentService departmentService) {
        this.courseService = courseService;
        this.departmentService = departmentService;
    }

    // Define your course-related endpoints here

    /**
     * Get all courses ; used DTO to avoid circular reference issue !!
     * Also display department name instead of ID for better readability
     * 
     * @return List of CourseDTO (customised courses without department details)
     */
    @GetMapping
    public List<CourseDTO> getAllCourses() {
        return courseService.getAllCourses();
    }

    @GetMapping("/count")
    public long countCourses() {
        return courseService.countCourses();
    }

    /**
     * Get course by ID
     * 
     * @param id
     * @return Optional<CourseDTO> instead of Course to avoid circular reference
     *         issue !!
     */
    @GetMapping("/{id}")
    public Optional<CourseDTO> getCourseById(@PathVariable Long id) {
        return courseService.getCourseById(id);
    }

    @DeleteMapping("/{id}")
    public void deleteCourse(@PathVariable Long id) {
        courseService.deleteCourse(id); // no DTO needed here; just delete by ID
    }

    /**
     * Create a new course
     * There is no need to pass courseId in the request body as it will be
     * auto-generated by the database
     * Uses media type application/json for both request and response
     * 
     * @param courseDto
     * @return
     */
    @PostMapping(consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
    public CourseDTO createCourse(@RequestBody CourseDTO courseDto) {
        // we are creating a new Course entity from the CourseDTO as the JpaRepository
        // works with entities directly
        Course course = new Course();
        course.setCourseName(courseDto.getCourseName());
        course.setCourseDuration(courseDto.getCourseDuration());
        course.setCourseLevel(courseDto.getCourseLevel());
        course.setCourseAbbrev(courseDto.getCourseAbbrev());
        // You might need to set the department based on departmentId in courseDto
        // but we are using / getting the department name here for better readability
        if (courseDto.getDepartmentName() != null) {
            System.out.println("Department Name: " + courseDto.getDepartmentName());
            // Assuming you have a method to fetch Department by name
            Department department = departmentService.getDepartmentByName(courseDto.getDepartmentName());
            course.setDepartment(department);
        }
        Course savedCourse = courseService.saveCourse(course); // Save the course entity
        courseDto.setCourseId(savedCourse.getCourseId()); // not necessary but just to return the ID of the
                                                          // newly created course
        return courseDto;

    }

    // without DTO
    // @PutMapping("/{id}")
    // public Course updateCourse(@PathVariable Long id, @RequestBody Course course)
    // {
    // return courseService.updateCourse(id, course);
    // }

    // with DTO
    @PutMapping(consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE, path = "/{id}")
    public Course updateCourse(@PathVariable Long id, @RequestBody CourseDTO courseDto) {
        {
            Course course = new Course();
            course.setCourseName(courseDto.getCourseName());
            course.setCourseDuration(courseDto.getCourseDuration());
            course.setCourseLevel(courseDto.getCourseLevel());
            course.setCourseAbbrev(courseDto.getCourseAbbrev());
            // You might need to set the department based on departmentId in courseDto
            if (courseDto.getDepartmentName() != null) {
                System.out.println("Department Name: " + courseDto.getDepartmentName());
                // Assuming you have a method to fetch Department by name
                Department department = departmentService.getDepartmentByName(courseDto.getDepartmentName());
                System.err.println(
                        "Found Department: " + department.getDepartmentId() + " - " + department.getDepartmentName());
                course.setDepartment(department);
            }
            Course updatedCourse = courseService.updateCourse(id, course);
            return updatedCourse;

        }
    }

}
